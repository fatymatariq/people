# swagger.yml

openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people and notes"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: Basic authentication with username and password.
      x-basicInfoFunc: people_api.users.verify_password
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer authentication with access token.
      x-bearerInfoFunc: people_api.users.verify_password
  schemas:
    Person:
      type: "object"
      required:
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    lname:
      name: "lname"
      description: "Last name of the person to get"
      in: path
      required: True
      schema:
        type: "string"
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: True
      schema:
        type: "integer"
    user_id:
      name: "user_id"
      description: "ID of the User"
      in: path
      required: True
      schema:
        type: "integer"

security:
  - BearerAuth: []

paths:
  /people:
    get:
      operationId: "people_api.people.read_all"
      tags:
        - People
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"

    post:
      operationId: "people_api.people.create"
      tags:
        - People
      summary: "Create a person"
      requestBody:
          description: "Person to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "person"
                $ref: "#/components/schemas/Person"
      responses:
        "201":
          description: "Successfully created person"
  /people/{lname}:
      get:
        operationId: "people_api.people.read_one"
        tags:
          - People
        summary: "Read one person"
        parameters:
          - $ref: "#/components/parameters/lname"
        responses:
          "200":
            description: "Successfully read person"
      put:
        operationId: "people_api.people.update"
        tags:
          - People
        summary: "Update a person"
        parameters:
          - $ref: "#/components/parameters/lname"
        responses:
          "200":
            description: "Successfully updated person"
        requestBody:
          content:
            application/json:
              schema:
                x-body-name: "person"
                $ref: "#/components/schemas/Person"
      delete:
        operationId: "people_api.people.delete"
        tags:
          - People
        summary: "Delete a person"
        parameters:
          - $ref: "#/components/parameters/lname"
        responses:
          "204":
            description: "Successfully deleted person"
  /notes:
    post:
      operationId: "people_api.notes.create"
      tags:
        - Notes
      summary: "Create a note associated with a person"
      requestBody:
          description: "Note to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "note"
                type: "object"
                properties:
                  person_id:
                    type: "integer"
                  content:
                    type: "string"
      responses:
        "201":
          description: "Successfully created a note"
  /notes/{note_id}:
    get:
      operationId: "people_api.notes.read_one"
      tags:
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully read one note"
    put:
      tags:
        - Notes
      operationId: "people_api.notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully updated note"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "note"
              type: "object"
              properties:
                content:
                  type: "string"
    delete:
      tags:
        - Notes
      operationId: "people_api.notes.delete"
      summary: "Delete a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Successfully deleted note"
  /users:
    post:
      operationId: "people_api.users.create"
      tags:
        - Users
      summary: "Register a user."
      security: [] 
      requestBody:
          description: "User to create"
          required: True
          content:
            application/json:
              schema:
                x-body-name: "user"
                type: "object"
                required:
                  - username
                  - password      
                properties:
                  username:
                    type: "string"
                  password:
                    type: "string"
      responses:
        "201":
          description: "User successfully registered."
  /users/{user_id}:
    get:
      operationId: "people_api.users.read_one"
      tags:
        - Users
      summary: "Read one user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read user."
  /users/token:
    get:
      operationId: "people_api.users.get_auth_token"
      tags:
        - Users
      summary: "Generate athentication token."
      security:
        - BasicAuth: []
      responses:
        "200":
          description: "Successfully generated authorization token."