errors:

This POST/PUT/PATCH request contains JSON, but it isn’t formatted correctly. It’s missing a closing curly brace (}) at the end.

import json

# Example JSON string with a missing closing curly brace
json_str = '{"name": "John", "age": 30, "city": "New York"'

try:
    # Attempt to parse the JSON string
    json_obj = json.loads(json_str)
except ValueError as e:
    print(f"Error: {e}")
else:
    # If parsing is successful, print the parsed JSON object
    print(json_obj)
	
HTTP/1.1 400 Bad Request
Content-Type: application/json

{
    "error": "This request was not properly formatted. Please send again."
}
------------------------------------------
There are several other ways that the request can be wrong even if it’s formatted properly. In this next example, the user sends a POST request but includes an unsupported media type:

check Content-Type header
or
if request.is_json:

HTTP/1.1 415 Unsupported Media Type
Content-Type: application/json

{
    "error": "The application/xml mediatype is not supported."
}
-----------------------------------------------------
In this next example, the user sends a POST/PATCH/PUT request but includes car data that doesn’t match fields of the other data:

POST /cars HTTP/1.1
Host: api.example.com
Content-Type: application/json

{
    "make": "Nissan",
    "model": "240SX",
    "topSpeed": 120
    "warrantyLength": 10
}
-------
from typing import TypedDict 
import pydantic


class SomeDict(TypedDict):
    val: int
    name: str

# this could be a valid/invalid declaration
obj: SomeDict = {
    'val': 12,
    'name': 'John',
}

# validate with pydantic
try:
    pydantic.create_model_from_typeddict(SomeDict)(**obj)

except pydantic.ValidationError as exc: 
    print(f"ERROR: Invalid schema: {exc}")
	
-----

HTTP/1.1 422 Unprocessable Entity
Content-Type: application/json

{
    "error": "Request had invalid or missing data."
}
-----------------------------------------
Here, the user sends a GET request to /motorcycles, which doesn’t exist. The API sends back the following response:

HTTP/1.1 404 Not Found
Content-Type: application/json
...

{
    "error": "The requested resource was not found."
}
--------------------------------------------
if already exists in caseof post
        abort(
            406,
            f"Person with last name {lname} already exists",
        )